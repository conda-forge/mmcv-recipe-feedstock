{% set version = "2.0.1" %}
{% set number = 0 %}  # build number
# see https://github.com/conda-forge/conda-forge.github.io/issues/1059 for naming discussion
{% set torch_proc_type = "cuda" if cuda_compiler_version != "None" else "cpu" %}
{% if cuda_compiler_version != "None" %}
{% set number = number + 200 %}
{% endif %}

package:
  name: mmcv-recipe
  version: {{ version }}

source:
  url: https://github.com/open-mmlab/mmcv/archive/refs/tags/v{{ version }}.tar.gz
  sha256: a14ebebc8033fb2ff4c303ec2ce4b8b90345a1471bd93f155cb58a401f63dbc9
build:
  number: {{ number }}
  skip: true  # [win]
  # as of pytorch 1.13, conda-forge only builds for CUDA 11.2+, see
  # https://github.com/conda-forge/conda-forge-pinning-feedstock/issues/3491
  skip: true  # [cuda_compiler_version in ("10.2", "11.0", "11.1")]

outputs:
  - name: mmcv
    build:
      string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != "None"]
      string: cpu_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version == "None"]
    script: build_mmcv.sh  # [not win]
    requirements:
      build:
        - cross-python_{{ target_platform }}             # [build_platform != target_platform]
        - ninja
        - numpy                                          # [build_platform != target_platform]
        - psutil
        - python                                         # [build_platform != target_platform]
        - pytorch                                        # [build_platform != target_platform]
        - pytorch ={{ pytorch }}={{ torch_proc_type }}*  # [build_platform != target_platform]
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        # this adds matching cuda requirement to run deps using __cuda package
        - {{ compiler('cuda') }}                         # [cuda_compiler_version != "None"]
      host:
        - numpy
        - pip
        - python
        - pytorch
        - pytorch ={{ pytorch }}={{ torch_proc_type }}*
      run:
        # intentionally skipping opencv and pytorch (following upstream vendor)
        - __cuda  # [cuda_compiler_version != "None"]
        - addict
        - mmengine>=0.3.0
        - {{ pin_compatible('numpy') }}
        - packaging
        - Pillow
        - pyyaml
        - typing_extensions
        - yapf
      run_constrained:
        # additional run constraint to the one from the (version-only) run_export;
        # constraining the CPU builds to CPU pytorch isn't 100% necessary, but cleaner
        - pytorch =*={{ torch_proc_type }}*
    test:
      requires:
        - onnx
        - pip
        - pytest
        - pyturbojpeg
        - py-opencv
        - tifffile
        - torchvision
      imports:
        - mmcv
      source_files:
        - .dev_scripts/check_installation.py
        - tests
      commands:
        - pip check
        - python ./.dev_scripts/check_installation.py
        - python -m pytest ./tests/
        - python -c "import mmcv; print(mmcv.__version__)"

about:
  home: https://github.com/open-mmlab/mmcv
  summary: OpenMMLab Computer Vision Foundation
  license: Apache-2.0 AND LicenseRef-NVIDIA-License
  license_file:
    - LICENSE
    - LICENSES.md
  doc_url: https://mmcv.readthedocs.io
  dev_url: https://github.com/open-mmlab/mmcv

extra:
  recipe-maintainers:
    - weiji14
    - apatsekin
  feedstock-name: mmcv
